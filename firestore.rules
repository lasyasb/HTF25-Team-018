/**
 * @file Firebase Security Rules for ResumeAI application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model.
 *   Each user has a dedicated data tree under `/users/{userId}`, and only the
 *   authenticated user with a matching `uid` can access or modify data within
 *   their own tree.
 *
 * @data_structure All data is nested under /users/{userId}, creating a clear
 *   hierarchy that simplifies security rules:
 *     - /users/{userId}: User profile information.
 *     - /users/{userId}/resumes/{resumeId}: Resumes owned by the user.
 *     - /users/{userId}/resumes/{resumeId}/analysisResults/{analysisResultId}:
 *       AI analysis results for a specific resume.
 *     - /users/{userId}/resumes/{resumeId}/jobMatches/{jobMatchId}: Job matching
 *       results for a specific resume.
 *
 * @key_security_decisions
 *   - User listing is disallowed for privacy.
 *   - Only authenticated users can create, update, or delete data, and only
 *     within their own user tree.
 *   - Data validation is relaxed in this prototyping phase to allow for rapid
 *     iteration on the data model.  However, ownership validation is strictly
 *     enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile collection.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) Authenticated user with matching userId can access and manage their profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (get, update, delete) Authenticated user cannot access or modify another user's profile.
     * @deny (list) User listing is not allowed.
     * @principle Enforces user-ownership: only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures the resumes subcollection under a user's profile.
     * @path /users/{userId}/resumes/{resumeId}
     * @allow (create) Authenticated user with matching userId can create resumes under their profile.
     * @allow (get, update, delete) Authenticated user with matching userId can access and manage their own resumes.
     * @allow (list) Authenticated user with matching userId can list their resumes.
     * @deny (create) Unauthenticated user cannot create resumes.
     * @deny (get, update, delete) Authenticated user cannot access or modify another user's resumes.
     * @principle Enforces user-ownership: only the authenticated user can manage their own resumes.
     */
    match /users/{userId}/resumes/{resumeId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures the analysis results subcollection under a resume.
     * @path /users/{userId}/resumes/{resumeId}/analysisResults/{analysisResultId}
     * @allow (create) Authenticated user with matching userId can create analysis results for their resumes.
     * @allow (get, update, delete) Authenticated user with matching userId can access and manage analysis results for their resumes.
     * @allow (list) Authenticated user with matching userId can list analysis results for their resumes.
     * @deny (create) Unauthenticated user cannot create analysis results.
     * @deny (get, update, delete) Authenticated user cannot access or modify analysis results for another user's resumes.
     * @principle Enforces user-ownership: only the authenticated user can manage their own analysis results.
     */
    match /users/{userId}/resumes/{resumeId}/analysisResults/{analysisResultId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures the job matches subcollection under a resume.
     * @path /users/{userId}/resumes/{resumeId}/jobMatches/{jobMatchId}
     * @allow (create) Authenticated user with matching userId can create job matches for their resumes.
     * @allow (get, update, delete) Authenticated user with matching userId can access and manage job matches for their resumes.
     * @allow (list) Authenticated user with matching userId can list job matches for their resumes.
     * @deny (create) Unauthenticated user cannot create job matches.
     * @deny (get, update, delete) Authenticated user cannot access or modify job matches for another user's resumes.
     * @principle Enforces user-ownership: only the authenticated user can manage their own job matches.
     */
    match /users/{userId}/resumes/{resumeId}/jobMatches/{jobMatchId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}